{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"An Open Source Data Integration Toolkit","text":""},{"location":"#a-human-friendly-data-oriented-language","title":"A human friendly data-oriented language","text":"<p>hello.yaml <pre><code>start:\n- insert:\nname: John Doe\nage: 80\n- print:\n- print: Hello $name$ your age is $age - 41$\n</code></pre> To learn more about the language, check the language documentation.</p>"},{"location":"#a-simple-command-line-tool","title":"A simple command line tool","text":"<p>openpipe run hello.yaml <pre><code>{'name': 'John Doe', 'age': 80}\nHello John Doe your age is 39\n</code></pre> To learn more about the tool, check the tool documentation.</p>"},{"location":"Windows_Python_3_Install/","title":"Windows Python 3 Install","text":"<p>Note</p> <p>This document shows downloading and installing Python 3.7.0 (32 bits) on Windows 7 in Summer 2018. You should download and install the latest version of Python. The current latest (as of Winter 2019) is Python 3.7.2, 64 bits.</p>"},{"location":"Windows_Python_3_Install/#downloading","title":"Downloading","text":"<p>Click Python Download.</p> <p>The following page will appear in your browser: </p> <p>Click the Download Python 3.7.0 button.</p> <p>The file named python-3.7.0.exe should start downloading into your standard download folder.</p>"},{"location":"Windows_Python_3_Install/#installing","title":"Installing","text":"<p>Once the download is completed, double-click the file icon to open it, the following warning will be shown: </p> <p>Click Run</p> <p>A Python 3.7 (32-bit) Setup pop-up window will appear: </p> <p>Ensure that the Install launcher for all users (recommended) and the Add Python 3.7 to PATH checkboxes at the bottom are checked.</p> <p>Highlight the Install Now (or Upgrade Now) message, and then click it.</p> <p>A User Account Control pop-up window will appear, posing the question Do you want the allow the following program to make changes to this computer: </p> <p>Click the Yes button.</p> <p>A new Python 3.7 Setup pop-up window will appear with a Setup Progress message and a progress bar: </p> <p>During installation, it will show the various components it is installing and move the progress bar towards completion. Soon, a new Python 3.7 Setup pop-up window will appear with a Setup was successfully message: </p> <p>Click the Close button.</p> <p>Python should now be installed.</p> <p>This document was based on:https://www.ics.uci.edu/~pattis/common/handouts/pythoneclipsejava/python.html</p>"},{"location":"1.0/action-devel/","title":"Openpipe Action Development","text":"<p>This document provides is a quick reference for developers planning to write openpipe action modules.</p>"},{"location":"1.0/action-devel/#example-action-code","title":"Example Action Code","text":"<pre><code>\"\"\"\nPrint content to the standard output\n\"\"\"\nfrom openpipe.pipeline.engine import ActionRuntime\n\n\nclass Action(ActionRuntime):\n\n    optional_config = \"\"\"\n    '{ _ }'     # The content to be printed, default is the input item ('{ _ }')\n    \"\"\"\n\n    def on_input(self, item):\n        print(self.config)      # Print item to the console\n        self.put(item)          # No change to the data stream, input -&gt; output\n</code></pre>"},{"location":"1.0/action-devel/#example-action-usage","title":"Example Action Usage","text":"<pre><code>start:\nprint: Hello world\n</code></pre>"},{"location":"1.0/action-devel/#introduction","title":"Introduction","text":"<p>An openpipe action is a regular Python module with the following requirements:</p> <ul> <li>Must provide a docstring with a short description, the first line will be displayed on openpipe help</li> <li>Must provide a class named <code>Action</code>, which:<ul> <li>Must be derived from the <code>ActionRuntime</code> class</li> <li>May provide the following class attributes to be handled by the pipeline engine:<ul> <li><code>required_config</code>: string with YAML describing required config</li> <li><code>optional_config</code>: string with YAML describing optional config</li> </ul> </li> <li>May provide the following class methods to be invoked by the pipeline engine:<ul> <li><code>on_start(self, config)</code>: invoked when the pipeline is started</li> <li><code>on_input(self, item)</code>: invoked when an input item is received<ul> <li>may use <code>self.put(item)</code> once or multiple times to produce items</li> </ul> </li> <li><code>on_finish(self, reason)</code>: invoked when the pipeline is finished</li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/actions/","title":"Actions","text":"<p>Data Sourcing</p> Action Purpose empty Produce \"True\" when the input is empty execute Execute a command and produce the execution result insert Insert an item insert path split Split a path to 'directory' and 'file' components iterate Iterate the configuration item producing each element merge Merge input and configuration items queue Produce a list by queuing items read from clock Produce the system clock time at regular intervals read from file Produce metadata/content from a local or remote file read from file list Produce the list of files matching a pattern read from file status Get path status information read from openpipe actions Produce the list of available action actions read from url Produce metadata/content from an URL <p>Data Selection</p> Action Purpose select Select input items based on a conditional expression select subset Select a subset of data from a dictionary input <p>Data Transformation</p> Action Purpose decompress Decompress gzip input item reduce Reduce a complex item type into a simpler structure transform using csv Produce dictionary from CSV line based input transform using regex assign Build a dictionary from a key/map regex group expression <p>Data Analysis</p> Action Purpose count Count the number of elements received group by stats Produce statistics by grouping input items by keys pprint Pretty print an item print Print an item transform using terminaltables Produce a text table <p>Data Control</p> Action Purpose limit Limit the max number of items sent to the next action send to segment Send a copy of the input item to other segment(s) tag Tag input item with the provided configuration tag item tag key Tag a key or list of keys <p>Data Export</p> Action Purpose write to file Write item to a file <p>Data Manipulation</p> Action Purpose drop Remove some keys from the input item sort Sort items by keys update Update values depending on conditional expressions update using case replace Update field values using case match update using key mapping Map values from source keys to values on target keys update using string replace Replace some phrase with other phrase <p>Data Validation</p> Action Purpose assert Asserts that input matches the config provided item"},{"location":"1.0/actions/#data-sourcing","title":"Data Sourcing","text":""},{"location":"1.0/actions/#empty","title":"empty","text":"<p>Produce \"True\" when the input is empty</p> <p>Module source: openpipe/actions/empty_.py</p>"},{"location":"1.0/actions/#execute","title":"execute","text":"<p>Execute a command and produce the execution result</p> <p>Required Configuration <pre><code>    - execute:\ncmd:    # The command to be executed\n</code></pre></p> <p>Optional Configuration <pre><code>        shell:  True    # Execute the command as parameters to a system shell\noutput_as_text: True # Output the command output as text\nfail_on_error: True  # Abort pipeline if exit code is not zero\n</code></pre></p> <p>Module source: openpipe/actions/execute_.py</p>"},{"location":"1.0/actions/#insert","title":"insert","text":"<p>Insert an item</p> <p>Required Configuration <pre><code>    - insert:         # Item to be produced as an output\n</code></pre></p> <p>Module source: openpipe/actions/insert_.py</p>"},{"location":"1.0/actions/#insert-path-split","title":"insert path split","text":"<p>Split a path to 'directory' and 'file' components</p> <p>Optional Configuration <pre><code>    - insert path split:\n'{ _ }'     # The path to produce the director name from\n</code></pre></p> <p>Module source: openpipe/actions/insert/path/split_.py</p>"},{"location":"1.0/actions/#iterate","title":"iterate","text":"<p>Iterate the configuration item producing each element</p> <p>Optional Configuration <pre><code>    - iterate:\n'{ _ }'     # The item to be iterated over\n</code></pre></p> <p>Module source: openpipe/actions/iterate_.py</p>"},{"location":"1.0/actions/#merge","title":"merge","text":"<p>Merge input and configuration items</p> <p>Optional Configuration <pre><code>    - merge:\n$_tag$ # The item to merge with\n</code></pre></p> <p>Module source: openpipe/actions/merge_.py</p>"},{"location":"1.0/actions/#queue","title":"queue","text":"<p>Produce a list by queuing items</p> <p>Required Configuration <pre><code>    - queue:         The count of items to be queued before producing a list.\nIf set to 0 all items are queued until the input ends\n</code></pre></p> <p>Module source: openpipe/actions/queue_.py</p>"},{"location":"1.0/actions/#read-from-clock","title":"read from clock","text":"<p>Produce the system clock time at regular intervals</p> <p>Optional Configuration <pre><code>    - read from clock:\ninterval:   0   # Pause time between insertions, 0 means forever\nmax_count:  1     # Max number of item insertions\n</code></pre></p> <p>Module source: openpipe/actions/read/from/clock_.py</p>"},{"location":"1.0/actions/#read-from-file","title":"read from file","text":"<p>Produce metadata/content from a local or remote file</p> <p>Required Configuration <pre><code>    - read from file:\npath:                       # Local path or HTTP/HTTPS/FTP url\n</code></pre></p> <p>Optional Configuration <pre><code>        # The mime_type will be used by the action to identify and automatically\n# decode the file content.\n# With the default value of 'auto' the action will try to guess the\n# mime type based on the content header or file extension.\nmime_type:  auto\n\n# The following option is only applicable to local filenames\nauto_expand_home: True      # Expand '~' on path to user home dir\n</code></pre></p> <p>Module source: openpipe/actions/read/from/file_.py</p>"},{"location":"1.0/actions/#read-from-file-list","title":"read from file list","text":"<p>Produce the list of files matching a pattern</p> <p>Optional Configuration <pre><code>    - read from file list:\n'{ _ }'     # The pattern to be used for matching\n</code></pre></p> <p>Module source: openpipe/actions/read/from/file/list_.py</p>"},{"location":"1.0/actions/#read-from-file-status","title":"read from file status","text":"<p>Get path status information</p> <p>Optional Configuration <pre><code>    - read from file status:\n'{ _ }'         # Path of the file to be checked\n</code></pre></p> <p>Module source: openpipe/actions/read/from/file/status_.py</p>"},{"location":"1.0/actions/#read-from-openpipe-actions","title":"read from openpipe actions","text":"<p>Produce the list of available action actions</p> <p>Optional Configuration <pre><code>    - read from openpipe actions:\n'{ _ }'     # The item to be printed, the default is the input item\n</code></pre></p> <p>Module source: openpipe/actions/read/from/openpipe/actions_.py</p>"},{"location":"1.0/actions/#read-from-url","title":"read from url","text":"<p>Produce metadata/content from an URL</p> <p>Required Configuration <pre><code>    - read from url:\nurl:                       # HTTP/HTTPS/FTP url\n</code></pre></p> <p>Optional Configuration <pre><code>        # The mime_type will be used by the action to identify and automatically\n# decode the file content.\n# With the default value of 'auto' the action will try to guess the\n# mime type based on the content header or file extension.\nmime_type:  auto\n\n# The following options are only relevant for HTTP/HTTPS/FTP paths\ntimeout: 30                 # Global timeout (in secs) for the operation\nignore_http_errors: False   # Ignore HTTP errors replies\nuser_agent: curl/7.64.0     # User-agent to use on HTTP requests\n</code></pre></p> <p>Module source: openpipe/actions/read/from/url_.py</p>"},{"location":"1.0/actions/#data-selection","title":"Data Selection","text":""},{"location":"1.0/actions/#select","title":"select","text":"<p>Select input items based on a conditional expression</p> <p>Required Configuration <pre><code>    - select:  # Boolean Expression\n# Items are only copied to next action only when the expression evaluates\n# to True\n</code></pre></p> <p>Module source: openpipe/actions/select_.py</p>"},{"location":"1.0/actions/#select-subset","title":"select subset","text":"<p>Select a subset of data from a dictionary input</p> <p>Required Configuration <pre><code>    - select subset:         # YAML describing the elements to be retrieved\n</code></pre></p> <p>Module source: openpipe/actions/select/subset_.py</p>"},{"location":"1.0/actions/#data-transformation","title":"Data Transformation","text":""},{"location":"1.0/actions/#decompress","title":"decompress","text":"<p>Decompress gzip input item</p> <p>Optional Configuration <pre><code>    - decompress:\npath:   \"\"      # If not provided the input item is used\ntype:   gzip    # the type to decompress\n</code></pre></p> <p>Module source: openpipe/actions/decompress_.py</p>"},{"location":"1.0/actions/#reduce","title":"reduce","text":"<p>Reduce a complex item type into a simpler structure</p> <p>Optional Configuration <pre><code>    - reduce:\n'{ _ }'     # The target reduction format\n</code></pre></p> <p>Module source: openpipe/actions/reduce_.py</p>"},{"location":"1.0/actions/#transform-using-csv","title":"transform using csv","text":"<p>Produce dictionary from CSV line based input</p> <p>Optional Configuration <pre><code>    - transform using csv:\ndelimiter: \",\"          # One-character string used to separate fields\nquotechar: '\"'          # One-character to wrap string values\nauto_number: False      # Attempt to convert fields to numbers\nignore_errors: False    # Ignore conversion errors\nfield_list: []          # Optional list of fields to be used as headers\n</code></pre></p> <p>Module source: openpipe/actions/transform/using/csv_.py</p>"},{"location":"1.0/actions/#transform-using-regex-assign","title":"transform using regex assign","text":"<p>Build a dictionary from a key/map regex group expression</p> <p>Required Configuration <pre><code>    - transform using regex assign:\nregex:      # A regex expression that must match two groups:\n# (group1) (group2)\n</code></pre></p> <p>Module source: openpipe/actions/transform/using/regex/assign_.py</p>"},{"location":"1.0/actions/#data-analysis","title":"Data Analysis","text":""},{"location":"1.0/actions/#count","title":"count","text":"<p>Count the number of elements received</p> <p>Optional Configuration <pre><code>    - count:\ngroup_by:   \"\"  # Expression to use for count aggregation\n</code></pre></p> <p>Module source: openpipe/actions/count_.py</p>"},{"location":"1.0/actions/#group-by-stats","title":"group by stats","text":"<p>Produce statistics by grouping input items by keys</p> <p>Required Configuration <pre><code>    - group by stats:\nkeys:         # List of keys to be used for grouping\n</code></pre></p> <p>Optional Configuration <pre><code>        stats: [sum, count, max, min]   # List of stats to obtain\nsorted_fields: []               # When these fields change, produce the sort\n</code></pre></p> <p>Module source: openpipe/actions/group/by/stats_.py</p>"},{"location":"1.0/actions/#pprint","title":"pprint","text":"<p>Pretty print an item</p> <p>Optional Configuration <pre><code>    - pprint:\n'{ _ }'     # The content to be pretty printed\n</code></pre></p> <p>Module source: openpipe/actions/pprint_.py</p>"},{"location":"1.0/actions/#print","title":"print","text":"<p>Print an item</p> <p>Optional Configuration <pre><code>    - print:\n\"{_}\"     # The item to be printed, the default is the input item\n</code></pre></p> <p>Module source: openpipe/actions/print_.py</p>"},{"location":"1.0/actions/#transform-using-terminaltables","title":"transform using terminaltables","text":"<p>Produce a text table</p> <p>Required Configuration <pre><code>    - transform using terminaltables:\nheader:     # List of labels to be used as column headers\nkeys:       # List of keys to be used or row elements\n</code></pre></p> <p>Module source: openpipe/actions/transform/using/terminaltables_.py</p>"},{"location":"1.0/actions/#data-control","title":"Data Control","text":""},{"location":"1.0/actions/#limit","title":"limit","text":"<p>Limit the max number of items sent to the next action</p> <p>Required Configuration <pre><code>    - limit:\nmax:    # The max number of items sent to next action\n</code></pre></p> <p>Module source: openpipe/actions/limit_.py</p>"},{"location":"1.0/actions/#send-to-segment","title":"send to segment","text":"<p>Send a copy of the input item to other segment(s)</p> <p>Required Configuration <pre><code>    - send to segment:\nname:               # Name or list of of segments to receive the item\n</code></pre></p> <p>Optional Configuration <pre><code>        when:   \"\"  # An expression that should result in a boolean\n\n# If `when` is set, item will only be copied to the segment(s)\n# when it evaluates to True. And sent to next action when it evaluates\n# to False\n</code></pre></p> <p>Module source: openpipe/actions/send/to/segment_.py</p>"},{"location":"1.0/actions/#tag","title":"tag","text":"<p>Tag input item with the provided configuration tag item</p> <p>Optional Configuration <pre><code>    - tag:\n'{ _ }'     #  Default is to tag the entire input item\n</code></pre></p> <p>Module source: openpipe/actions/tag_.py</p>"},{"location":"1.0/actions/#tag-key","title":"tag key","text":"<p>Tag a key or list of keys</p> <p>Required Configuration <pre><code>    - tag key:\nname:   #  The name or list of names for the keys to be tagged\n</code></pre></p> <p>Module source: openpipe/actions/tag/key_.py</p>"},{"location":"1.0/actions/#data-export","title":"Data Export","text":""},{"location":"1.0/actions/#write-to-file","title":"write to file","text":"<p>Write item to a file</p> <p>Required Configuration <pre><code>    - write to file:\npath:                   # Filename of the file to create/overwrite/append\n</code></pre></p> <p>Optional Configuration <pre><code>        content: '{ _ }'            # Content to be written to the file\nmode: \"w\"               # Open file mode (write/append)\nclose_on_item: False    # Force file close after each received item\n</code></pre></p> <p>Module source: openpipe/actions/write/to/file_.py</p>"},{"location":"1.0/actions/#data-manipulation","title":"Data Manipulation","text":""},{"location":"1.0/actions/#drop","title":"drop","text":"<p>Remove some keys from the input item</p> <p>Required Configuration <pre><code>    - drop: # name or list of names of the keys to be removed\n</code></pre></p> <p>Module source: openpipe/actions/drop_.py</p>"},{"location":"1.0/actions/#sort","title":"sort","text":"<p>Sort items by keys</p> <p>Required Configuration <pre><code>    - sort:\nkey:                    # Name or list of names to use a group key\n</code></pre></p> <p>Optional Configuration <pre><code>        descendent: False       # Use descendent order ?\n\n# It is possible to identify groups of repeated keys by setting\n# key_on_first. When it's set, the key will only be present on the\n# first item of a group items with the repeated key\nkey_on_first: False\n</code></pre></p> <p>Module source: openpipe/actions/sort_.py</p>"},{"location":"1.0/actions/#update","title":"update","text":"<p>Update values depending on conditional expressions</p> <p>Required Configuration <pre><code>    - update:\nset:            # Dictionary with keys/values to be updated\n</code></pre></p> <p>Optional Configuration <pre><code>        where:  True    # Expression to select items to be updated\nelse:   {}      # Dictionary with keys/values to be updated when 'where' is False\n</code></pre></p> <p>Module source: openpipe/actions/update_.py</p>"},{"location":"1.0/actions/#update-using-case-replace","title":"update using case replace","text":"<p>Update field values using case match</p> <p>Required Configuration <pre><code>    - update using case replace:  # Dictionary with the updates rules:\n#\n#   target_key_name:\n#       target_key_value: expression\n#\n#  Set target_key_name to target_key_value when expression evaluates\n#  to True\n</code></pre></p> <p>Module source: openpipe/actions/update/using/case/replace_.py</p>"},{"location":"1.0/actions/#update-using-key-mapping","title":"update using key mapping","text":"<p>Map values from source keys to values on target keys</p> <p>Required Configuration <pre><code>    - update using key mapping:  # Dictionary with the key mapping :\n#\n#   target_key_name:\n#       source_key_name:\n#           old_value: new_value\n#\n#  The action will set the \"target_key_name\" to \"new_value\" when the value\n#  at source_key_name is equal to \"old_value\"\n</code></pre></p> <p>Module source: openpipe/actions/update/using/key/mapping_.py</p>"},{"location":"1.0/actions/#update-using-string-replace","title":"update using string replace","text":"<p>Replace some phrase with other phrase</p> <p>Required Configuration <pre><code>    - update using string replace:  # Dictionary with the replacement rules:\n# Replacement rules for a single string input item:\n#\n#   { \"search_string\" : \"replace_string\", ... }\n#   Replaces all occurrences of search_string with replace_string\n#\n#   source_key_name:\n#       \"search_string\" : \"replace_string\"\n#\n#  In the 'source_key_name' value replaces all occurrences of\n# 'search_string' with 'replace_string' in the\n</code></pre></p> <p>Module source: openpipe/actions/update/using/string/replace_.py</p>"},{"location":"1.0/actions/#data-validation","title":"Data Validation","text":""},{"location":"1.0/actions/#assert","title":"assert","text":"<p>Asserts that input matches the config provided item</p> <p>Required Configuration <pre><code>    - assert:         # The item with the expected value(s)\n</code></pre></p> <p>Module source: openpipe/actions/assert_.py</p>"},{"location":"1.0/language/","title":"Data Pipeline Language","text":""},{"location":"1.0/language/#introduction","title":"Introduction","text":"<p>This page describes the syntax and core concepts of the data pipeline language, an human friendly data-oriented language that can be used to describe data transformation workflows for both structured and unstructured data. DPL does not replace technology specific languages (e.g. SQL), instead it  provides an higher level computable language capable of integrating data from diverse formats, sources and technology.</p>"},{"location":"1.0/language/#prerequisites","title":"Prerequisites","text":"<p>DPL is entirely based on the YAML format. The knowledge of YAML is fundamental for the proper understanding of the material in this document. While in general the data processing operations will be described using markup language, when calculations and transformations are needed, a good understanding of Python's Standard Data Types and Operations is required.</p>"},{"location":"1.0/language/#concepts","title":"Concepts","text":""},{"location":"1.0/language/#pipeline","title":"Pipeline","text":"<p>DPL follows the data pipeline design pattern: a set of data processing elements connected in series, where the output of one element is the input of the next one. In DPL the elements are referred as actions, and a sequence of actions is referred as a segment. A pipeline document is a single YAML document that contains one or more segments.</p>"},{"location":"1.0/language/#segments","title":"Segments","text":"<p>A segment must be represented by a dictionary, where the key is the segment name and the value is a sequence of actions.</p> <p>_segment name </p> <p>Segment names started with \"_\" will not be loaded. They can be used to store configuration to be referenced with YAML anchors. The <code>_libraries</code> segment name has a special purpose explained later on this document.</p>"},{"location":"1.0/language/#actions","title":"Actions","text":"<p>An action must be represented by a dictionary, where the key is an action name and the value contains the action config, config may be of any of the YAML supported data types.</p>"},{"location":"1.0/language/#example","title":"Example","text":"<p>pipeline.yaml     <pre><code># This is the 'start' segment\nstart:\n# Call the \"print\" action with the config string Hello World!\n- print: Hello World!\n</code></pre></p> <p>Output:     <pre><code>Hello World!\n</code></pre></p> <p>The start segment</p> <p>Runnable pipelines must contain a segment named start . The first operation in that segment will receive a single input item with openpipe run arguments.</p>"},{"location":"1.0/language/#multiple-segments","title":"Multiple Segments","text":"<p>A single pipeline may need to produce distinct outputs from the same input data, in order to support this some actions can send data to other segments.</p>"},{"location":"1.0/language/#integrated-development-environment","title":"Integrated Development Environment","text":"<p>At this time there is no specialized IDE for pipeline editing, any general purpose IDE with a good support for YAML is suitable.</p>"},{"location":"1.0/language/#workflow-execution","title":"Workflow Execution","text":""},{"location":"1.0/language/#document-loading","title":"Document Loading","text":"<p>The command line tool <code>openpipe</code> is the software that reads a pipeline document file, loads it into the execution engine and activates the workflow.</p>"},{"location":"1.0/language/#action-modules","title":"Action Modules","text":"<p>The execution engine loads the action modules associated with  action names, and creates action instances for every action defined in the pipeline. Action modules can provide a wide range of action types: collection, filtering, exporting, etc.</p> <p>You can get the list of available actions with: <pre><code>openpipe help\n</code></pre></p> <p>You can get the help for an action with: <pre><code>openpipe help \u00abaction\u00bb\n</code></pre></p>"},{"location":"1.0/language/#data-items","title":"Data Items","text":"<p>In DPL any kind of workflow managed data is referred as an item, in openpipe items are stored in memory and transmitted as Python object references, as such, items can be of any data type or class available with Python.</p>"},{"location":"1.0/language/#data-flow","title":"Data Flow","text":"<p>Action instances should be observed as independent processing units, the following items will be available to them:</p> <ul> <li>Input Item: the input data provided to the action</li> <li>Config Item: the config data that is based on the user provided config</li> <li>Output Item: output data produced by the action execution</li> <li>Tag Item: the tag</li> </ul> <p>Output -&gt; Input</p> <p>As a general rule the output item of a action will be the input item of the next action in the same segment, with the exception of the <code>send to</code> action that can deliver items to the first action of other segments.</p> <p>Last Action Output Items</p> <p>Output items from the last action in a segment will be silently discarded.</p>"},{"location":"1.0/language/#dynamic-configuration","title":"Dynamic Configuration","text":"<p>Action configuration items provided in the pipeline document, can include dynamic components. When an action is executed due to the reception of an input item, it's configuration is updated to reflect any changes in the input. This feature provides the ability to embed python expressions and action input data on it's configuration.</p> <p>Before invoking the action input handling, any config text found between consecutive dollar signs ($) will be evaluated as a python expression and replaced with it's result. If you need to have '$' in your string, you will need to escape it using \\$ .</p> <p>During expression evaluation, the \"_\" symbol is a reference to the full input item. When the input item is a dict, it's keys values will be mapped to variable names so that you can refer to them easily by providing $key$.</p> <p>Important</p> <p>Several actions use a default configuration of <code>'{ _ }'</code> which means the full input item will be used as the configuration item. It is the case of the <code>print</code> and <code>assert</code> actions.</p> <p>Examples:</p> <p>calc.yaml     <pre><code>start:\n- print: 2 + 1 = $2 + 1$    # Print a sum result\n</code></pre></p> <p>Output:     <pre><code>2 + 1 = 3\n</code></pre></p> <p>input_item.yaml     <pre><code>start:\n- insert:\nplace: zoo\n- print: '{ _ }'    # Print the full  input item\n</code></pre></p> <p>input_field.yaml     <pre><code>start:\n- insert:\nanimal: Elephant\nsize: big\n- print: The $animal$ is $size$. # Print some fields\n</code></pre></p> <p>Output:     <pre><code>The Elephant is big.\n</code></pre></p>"},{"location":"1.0/language/#data-tagging","title":"Data Tagging","text":"<p>One of the challenges of using independent pipeline actions with a strict input/output pattern is the need to correlate/aggregate outputs from different actions. Openpipe addresses this with the support for data tagging. Items flowing through a pipeline can be tagged, a tag is a piece of information that will be transmitted with every item as it is sent to the _after tagging actions in the pipeline.</p> <p>Let's assume as example that we want to produce the count of 'a' letters from a list of files: <pre><code>start:\n- iterate: [/etc/passwd, /etc/group]\n- read from file: '{ _ }'\n# The read from file outputs only the file content, we can't refer to\n# the file name anymore\n- print: The number of 'a's in file is $ _.count(b'a') $\n</code></pre> In order to persist the file name, we need to tag it before the the read from file action.  After being tagged, we can refer to it with the special reference <code>$_tag$</code> : <pre><code>start:\n- iterate: [/etc/passwd, /etc/group]\n- tag: '{ _ }' # The filename is tagged, tag is available on every next action\n- read from file: '{ _ }'\n# We can now use $_tag_\n- print: The number of 'a's in file $_tag$ is $ _.count(b'a') $\n</code></pre></p> <p>When more than two items need to be tagged, a dictionary based tag needs to be used, every tag will be merged into the tag dict.</p> <pre><code>    # do some action\ntag: { animal_type: '{ _ }' }   # Tag it as animal type\n# do some other action\ntag: { animal_size: '{ _ }' }   # Tag it as animal size\n# We can now use $_tag['animal_type']$ and $_tag['animal_size']$\n</code></pre>"},{"location":"1.0/language/#action-libraries","title":"Action Libraries","text":"<p>A pipeline may contain a special segment named <code>_libraries</code>. This segment must contain a list of local directories or urls for libraries containing additional actions.</p>"},{"location":"1.0/language/#copyright-and-license","title":"Copyright and License","text":"<p>\u00a9 2019 CCS Group International</p> <p>This document is distributed under the Creative Commons Attribution 4.0 International License.</p>"},{"location":"1.0/openpipe-runtime/","title":"Openpipe runtime","text":""},{"location":"1.0/openpipe-runtime/#runtime-engine-openpipe","title":"Runtime Engine (openpipe)","text":"<p>Once you are familiar with the pipeline format as described on the previous sections, it is important to understand the purpose of the OPL runtime engine.</p> <p>An OPL runtime engine is the software responsible for:</p> <ol> <li>Loading, parsing and validating pipeline documents</li> <li>Mapping action names to computer functions (code)</li> <li>Validating action config versus the specific action requirements</li> <li>Allocate instances for each action of the pipeline</li> <li>Establishing the \"connections\" between steps</li> <li>Delivering the system current time to the first action of the 'start' segment</li> <li>Scheduling the action code execution when input data becomes available</li> </ol>"},{"location":"1.0/tool/","title":"Openpipe Tool","text":""},{"location":"1.0/tool/#introduction","title":"Introduction","text":"<p>The <code>openpipe</code> tool is a command line utility which runs on Linux, Mac and Windows and can be used to collect, transform and analyse data from multiple sources.</p> <p>In order to use openpipe, you must either adapt existing pipeline examples, or create your own data pipelines, in any case it is strongly recommended that you read the DPL language documentation .</p>"},{"location":"1.0/tool/#requirements","title":"Requirements","text":"<p>In order to use openpipe you must have Python 3 with pip installed. If you are using Windows and need help use the Windows Python 3 install guide, if you are using Linux follow the appropriate instructions for your Linux distribution.</p>"},{"location":"1.0/tool/#install","title":"Install","text":"<p>Open a command line prompt/terminal and install the openpipe package: <pre><code>pip install --user --upgrade openpipe\n</code></pre></p>"},{"location":"1.0/tool/#getting-started","title":"Getting Started","text":"<p>Using your preferred text editor, create a file named <code>pipeline.yaml</code> with the following content:</p> <pre><code># This is a simple example that pretty prints the content of a remote JSON file\nstart:\n- read from url: https://api.exchangeratesapi.io/latest\n- pprint:\n</code></pre> <p>Then just run the pipeline using:</p> <pre><code>openpipe run pipeline.yaml\n</code></pre> <p>To get a list of the action actions available in the standard library, run: <pre><code>openpipe help\n</code></pre> To get the help/example for a specific action, run: <pre><code>openpipe help action name\n</code></pre></p> <p>Example: <pre><code>openpipe help print\n</code></pre></p>"},{"location":"1.0/tool/#extra-actions-libraries","title":"Extra Actions Libraries","text":"<p>Openpipe supports additional actions libraries, you can check for available libraries with: <pre><code>openpipe list-actions-lib\n</code></pre></p> <p>Install the required library with:</p> <pre><code>openpipe install-actions-lib \u00ablibrary_name\u00bb\n</code></pre> <p>Action libraries are maintained on GitHub repositories under the openpipe-extra-actions organization.</p>"}]}